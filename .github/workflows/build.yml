name: Build and upload to PyPI

# https://github.com/joerick/cibuildwheel/blob/master/examples/github-deploy.yml
# https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip

on: [push, pull_request]



jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Build wheels
      uses: joerick/cibuildwheel@v1.10.0
      env:
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: "pytest {project}/tests"
        CIBW_BUILD: cp36-* cp37-* cp38-* cp39-*
        CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"

    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl


  check_coverage:
    name: Generate codecov
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.7'

    - name: Generate coverage report
      run: |
        pip install pytest
        pip install pytest-cov
        pip install -e .
        pytest --cov=dtw --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml




  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Build sdist
        run: |
           pip install build
           python -m build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}

